import sqlite3
from datetime import datetime, timedelta
import telebot
from telebot import types
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env
MAIN_BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN")  # –¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
NOTIFIER_BOT_TOKEN = os.getenv("NOTIFIER_BOT_TOKEN")  # –¢–æ–∫–µ–Ω notifier_bot
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS slots (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            time TEXT NOT NULL,
            booked INTEGER DEFAULT 0,
            user_id INTEGER DEFAULT NULL,
            group_name TEXT DEFAULT NULL
        )
    ''')
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è)
    cursor.execute('SELECT COUNT(*) FROM slots')
    if cursor.fetchone()[0] == 0:
        times = ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"]
        today = datetime.now()
        for i in range(30):
            date = (today + timedelta(days=i)).strftime('%Y-%m-%d')
            for time in times:
                cursor.execute('INSERT INTO slots (date, time, booked) VALUES (?, ?, ?)', (date, time, 0))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–Ω–µ–π
def get_free_days():
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('SELECT DISTINCT date FROM slots WHERE booked = 0 ORDER BY date')
    free_days = [row[0] for row in cursor.fetchall()]
    conn.close()
    return free_days

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
def format_date(date_str):
    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
    formatted_date = date_obj.strftime('%d.%m (%A)')  # –£–±—Ä–∞–Ω –≥–æ–¥, –æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
    return formatted_date

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
def get_schedule_for_day(date):
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('SELECT time, booked, group_name FROM slots WHERE date = ? ORDER BY time', (date,))
    schedule = cursor.fetchall()
    conn.close()
    return schedule

# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞
def book_slot(date, time, user_id, group_name):
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE slots SET booked = 1, user_id = ?, group_name = ? WHERE date = ? AND time = ?', 
                   (user_id, group_name, date, time))
    conn.commit()
    conn.close()

# –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def cancel_booking(date, time):
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE slots SET booked = 0, user_id = NULL, group_name = NULL WHERE date = ? AND time = ?', 
                   (date, time))
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
main_bot = telebot.TeleBot(MAIN_BOT_TOKEN)
notifier_bot = telebot.TeleBot(NOTIFIER_BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@main_bot.message_handler(commands=['start'])
def start(message):
    main_bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /free, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏."
    )

# –ö–æ–º–∞–Ω–¥–∞ /free
@main_bot.message_handler(commands=['free'])
def show_free_days(message):
    free_days = get_free_days()
    if free_days:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=7)
        buttons = []
        for day in free_days:
            formatted_day = format_date(day)
            buttons.append(types.KeyboardButton(formatted_day))
            if len(buttons) == 7:
                keyboard.add(*buttons)
                buttons = []
        if buttons:
            keyboard.add(*buttons)
        main_bot.send_message(message.chat.id, "–°–≤–æ–±–æ–¥–Ω—ã–µ –¥–Ω–∏:", reply_markup=keyboard)
        user_states[message.chat.id] = 'waiting_for_day'
    else:
        main_bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –¥–Ω–∏ –∑–∞–Ω—è—Ç—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
@main_bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_day')
def handle_day_selection(message):
    selected_day_formatted = message.text.split('(')[0].strip()  # –£–±–∏—Ä–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    free_days = get_free_days()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ YYYY-MM-DD
    try:
        selected_day = datetime.strptime(selected_day_formatted, '%d.%m').replace(year=datetime.now().year).strftime('%Y-%m-%d')
    except ValueError:
        main_bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    if selected_day in free_days:
        schedule = get_schedule_for_day(selected_day)
        schedule_text = "\n".join(
            [f"{time} ({group_name or '—Å–≤–æ–±–æ–¥–Ω–æ'})" for time, booked, group_name in schedule]
        )
        main_bot.send_message(message.chat.id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {format_date(selected_day)}:\n{schedule_text}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for time, booked, _ in schedule:
            if not booked:
                keyboard.add(types.KeyboardButton(time))  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
        keyboard.add(types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å"))  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è
        main_bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å':", reply_markup=keyboard)

        user_states[message.chat.id] = 'waiting_for_time'
        user_states[f"{message.chat.id}_selected_day"] = selected_day
    else:
        main_bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@main_bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_time')
def handle_time_selection(message):
    chat_id = message.chat.id
    selected_day = user_states.get(f"{chat_id}_selected_day")

    if message.text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å":
        main_bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è...")
        user_states[chat_id] = 'waiting_for_day'
        show_free_days(message)
        return

    selected_time = message.text.strip()
    if not selected_day:
        main_bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /free.")
        return

    schedule = get_schedule_for_day(selected_day)
    for time, booked, _ in schedule:
        if time == selected_time and not booked:
            main_bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
            user_states[chat_id] = 'waiting_for_group_name'
            user_states[f"{chat_id}_selected_time"] = selected_time
            return
    main_bot.send_message(chat_id, "–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
@main_bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_group_name')
def handle_group_name_input(message):
    chat_id = message.chat.id
    selected_day = user_states.get(f"{chat_id}_selected_day")
    selected_time = user_states.get(f"{chat_id}_selected_time")
    group_name = message.text.strip()

    if not group_name:
        main_bot.send_message(chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    book_slot(selected_day, selected_time, chat_id, group_name)
    main_bot.send_message(chat_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –≤—Ä–µ–º—è: {selected_day} {selected_time} –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}'!")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ notifier_bot
    notification_text = f"üîî –ù–æ–≤–∞—è –±—Ä–æ–Ω—å!\n–î–∞—Ç–∞: {selected_day}\n–í—Ä–µ–º—è: {selected_time}\n–ì—Ä—É–ø–ø–∞: {group_name}"
    for admin_id in ADMIN_IDS:
        notifier_bot.send_message(admin_id, notification_text)

# –ö–æ–º–∞–Ω–¥–∞ /cancel (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
@main_bot.message_handler(commands=['cancel'])
def cancel_booking_handler(message):
    if message.from_user.id not in ADMIN_IDS:
        main_bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏.")
        return

    main_bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM HH:MM':")
    user_states[message.chat.id] = 'waiting_for_cancel'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏
@main_bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_cancel')
def handle_cancel_input(message):
    try:
        date_part, time = message.text.split()
        date = datetime.strptime(date_part, '%d.%m').replace(year=datetime.now().year).strftime('%Y-%m-%d')
        cancel_booking(date, time)
        main_bot.send_message(message.chat.id, f"–ë—Ä–æ–Ω—å –Ω–∞ {date_part} {time} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except ValueError:
        main_bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    main_bot.polling(none_stop=True)