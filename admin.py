import os
import time
import sqlite3
from datetime import datetime, timedelta
import telebot
from dotenv import load_dotenv
from telebot import types

from utils import is_admin, reset_user_state, get_grouped_unconfirmed_bookings, confirm_booking, reject_booking, format_booking_info
from schedule_generator import create_schedule_grid_image

load_dotenv()

user_states = {}
admin_states = {}

ADMIN_BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")
MAIN_BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

admin_bot = telebot.TeleBot(ADMIN_BOT_TOKEN)
main_bot = telebot.TeleBot(MAIN_BOT_TOKEN)

def show_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏"))
    markup.add(types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    # admin_bot.send_message(chat_id, "–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=markup)

@admin_bot.message_handler(commands=['start'])
def handle_start(message):
    if not is_admin(message.from_user.id):
        admin_bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    admin_bot.set_my_commands([telebot.types.BotCommand("/start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    show_menu(message.chat.id)

@admin_bot.message_handler(func=lambda msg: msg.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def view_schedule(message):
    path = create_schedule_grid_image(message.chat.id)
    with open(path, "rb") as img:
        admin_bot.send_photo(message.chat.id, img, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏:")
    os.remove(path)
    reset_user_state(message.chat.id, user_states)
    show_menu(message)

@admin_bot.message_handler(func=lambda msg: msg.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏")
def handle_view_unconfirmed(message):
    admin_id = message.from_user.id
    if not is_admin(admin_id):
        admin_bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return

    groups = get_grouped_unconfirmed_bookings()
    if not groups:
        admin_bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
        show_menu(message.chat.id)
        return

    user_states[admin_id] = 'awaiting_confirmation_action'

    for group in groups:
        info = format_booking_info(group)
        ids = group['ids']
        user_id = group['user_id']

        markup = types.InlineKeyboardMarkup()
        confirm_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                 callback_data=f"confirm:{','.join(map(str, ids))}:{user_id}")
        reject_btn = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                                callback_data=f"reject:{','.join(map(str, ids))}:{user_id}")
        markup.add(confirm_btn, reject_btn)

        admin_bot.send_message(message.chat.id, info, reply_markup=markup)

    show_menu(message.chat.id)

@admin_bot.callback_query_handler(func=lambda call: ':' in call.data)
def handle_callback_query(call):
    try:
        action, booking_ids_str, user_id_str = call.data.split(":")
        booking_ids = list(map(int, booking_ids_str.split(',')))
        user_id = int(user_id_str)
    except ValueError:
        admin_bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    group_name = None

    try:
        with sqlite3.connect('bookings.db') as conn:
            cursor = conn.cursor()
            query_slots = 'SELECT date, time, group_name FROM slots WHERE id IN ({}) ORDER BY time'.format(
                ','.join('?' * len(booking_ids)))
            cursor.execute(query_slots, booking_ids)
            rows = cursor.fetchall()
        if not rows:
            raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–æ—Ç–∞—Ö")
        dates = set(row[0] for row in rows)
        times = [row[1] for row in rows]
        group_name = rows[0][2]
        date_str = dates.pop() if dates else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
        if len(dates) > 1:
            date_str = f"{date_str} –∏ –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã"
        start_time = times[0]
        end_time = times[-1]
        try:
            formatted_date = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
        except ValueError:
            formatted_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
        
        confirmation_message = f"‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–û–∂–∏–¥–∞–µ–º –≤–∞—Å {formatted_date} –≤ {start_time} –ø–æ –∞–¥—Ä–µ—Å—É –ø—Ä–æ—Å–ø–µ–∫—Ç –¢—Ä—É–¥–∞, 111–ê."
        decline_message = f"‚ùå –í–∞—à–∞ –±—Ä–æ–Ω—å –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞'} {formatted_date} –≤ {start_time} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. üòî\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
    
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏: {e}")
    if action == "confirm":
        confirm_booking(booking_ids)
        try:
            main_bot.send_message(user_id, confirmation_message)
        except Exception as e:
            print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        admin_bot.answer_callback_query(call.id, "‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    elif action == "reject":
        reject_booking(booking_ids)
        try:
            main_bot.send_message(user_id, decline_message)
        except Exception as e:
            print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        admin_bot.answer_callback_query(call.id, "‚ùå –ë—Ä–æ–Ω—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    try:
        admin_bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                            message_id=call.message.message_id,
                                            reply_markup=None)
    except Exception as e:
        print(f"[Error] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

if __name__ == "__main__":
    admin_bot.polling(none_stop=True)